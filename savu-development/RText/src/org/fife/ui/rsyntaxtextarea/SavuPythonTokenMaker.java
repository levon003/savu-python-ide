/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/*
 * 12/06/2005
 *
 * PythonTokenMaker.java - Token maker for the Python programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMaker;


/**
 * Scanner for the Python programming language.
 *
 * @author PyDE Team
 * @version 0.3
 */

public class SavuPythonTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LONG_STRING_1 = 2;
  public static final int LONG_STRING_2 = 4;
  public static final int FUNCTION_DEFINITION = 6;
  public static final int FUNCTION_DEFINITION_ARGS = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\12\1\15\1\16\1\14\22\0\1\37\1\72\1\11"+
    "\1\36\1\0\1\71\1\75\1\10\1\62\1\64\1\70\1\67\1\63"+
    "\1\32\1\27\1\71\1\21\7\24\2\3\1\72\1\35\1\73\1\66"+
    "\1\74\1\72\1\77\4\26\1\31\1\26\3\2\1\34\1\2\1\20"+
    "\5\2\1\6\2\2\1\7\2\2\1\23\2\2\1\65\1\13\1\65"+
    "\1\72\1\1\1\0\1\40\1\45\1\47\1\42\1\30\1\25\1\55"+
    "\1\57\1\51\1\33\1\46\1\17\1\54\1\41\1\50\1\52\1\2"+
    "\1\4\1\43\1\44\1\5\1\60\1\56\1\22\1\53\1\61\1\65"+
    "\1\76\1\65\1\72\6\0\1\15\u1fa2\0\1\15\1\15\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\4\2\2\4\1\5\1\6"+
    "\1\2\1\3\2\2\1\7\1\2\1\7\1\2\1\10"+
    "\21\2\1\11\10\7\2\12\2\4\2\13\1\14\1\15"+
    "\1\16\1\17\1\3\1\20\1\17\1\20\4\2\2\4"+
    "\1\0\2\4\1\0\4\2\1\17\1\3\1\17\12\2"+
    "\1\21\27\2\1\21\3\2\2\21\1\22\1\21\15\2"+
    "\2\0\1\13\1\0\2\20\1\0\12\2\1\4\1\23"+
    "\1\24\3\2\1\3\15\2\1\21\1\25\22\2\1\26"+
    "\14\2\1\27\1\30\1\13\1\20\6\2\1\26\3\2"+
    "\1\21\24\2\1\13\12\2\1\21\7\2\1\13\10\2"+
    "\1\21\1\13\4\2\1\13\2\2\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0140\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0140"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0140\0\u0140\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0"+
    "\0\u0d00\0\u0140\0\u0d40\0\u0140\0\u0d80\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0d80\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0"+
    "\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0"+
    "\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0"+
    "\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0"+
    "\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0"+
    "\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0"+
    "\0\u0180\0\u1c00\0\u0180\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u0140\0\u20c0\0\u2100"+
    "\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300"+
    "\0\u2340\0\u2380\0\u0140\0\u0140\0\u0140\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u0180"+
    "\0\u2840\0\u2880\0\u28c0\0\u2800\0\u2900\0\u2940\0\u2980\0\u29c0"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0"+
    "\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u0140"+
    "\0\u0140\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u1b00\0\u3100"+
    "\0\u3140\0\u0180\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0"+
    "\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0"+
    "\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0"+
    "\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0"+
    "\0\u3a40\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u1540\0\u3e40"+
    "\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u0d00";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\6\2\0\1\20\1\21\1\7\1\22"+
    "\1\23\1\7\1\10\1\24\1\7\1\25\1\26\1\7"+
    "\1\27\2\7\1\30\1\31\1\20\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\7\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\2\53\1\55\1\56\1\57\1\55\1\54\1\60"+
    "\1\61\1\62\1\63\1\30\10\64\1\65\67\64\11\66"+
    "\1\67\66\66\1\6\1\70\1\71\1\6\4\71\2\6"+
    "\1\0\1\6\2\0\1\20\2\71\1\6\2\71\1\6"+
    "\2\71\1\6\2\71\1\6\2\71\2\6\1\20\22\71"+
    "\1\72\16\6\2\73\1\6\4\73\2\6\1\0\1\6"+
    "\2\0\1\20\2\73\1\6\2\73\1\6\2\73\1\6"+
    "\2\73\1\6\2\73\2\6\1\20\22\73\1\6\1\30"+
    "\1\74\13\6\101\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\22\7\16\0\3\75\1\10\4\75"+
    "\3\0\1\75\1\0\1\75\1\0\2\76\1\10\2\75"+
    "\1\10\2\75\1\77\2\100\1\0\2\101\1\0\1\75"+
    "\1\0\22\75\15\0\1\75\1\0\7\7\1\15\1\16"+
    "\5\0\10\7\1\0\1\102\1\7\1\0\2\7\3\0"+
    "\1\103\7\7\1\104\11\7\17\0\3\7\1\13\1\7"+
    "\1\13\1\7\1\15\1\16\5\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\1\7\1\105\20\7\17\0\7\7"+
    "\1\15\1\16\5\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\22\7\17\0\3\7\1\13\1\7\1\13\1\7"+
    "\1\15\1\16\5\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\22\7\16\0\10\106\1\107\1\106\1\0\1\110"+
    "\64\106\11\111\1\112\1\0\1\113\64\111\16\0\1\20"+
    "\20\0\1\20\41\0\7\7\7\0\10\7\1\0\1\114"+
    "\1\7\1\0\2\7\3\0\1\115\7\7\1\116\1\117"+
    "\10\7\16\0\3\75\1\120\4\75\3\0\1\75\1\0"+
    "\1\75\1\0\2\76\1\121\2\122\1\121\2\75\1\77"+
    "\2\100\1\0\2\101\1\0\1\75\1\0\22\75\15\0"+
    "\1\75\1\0\3\7\1\123\3\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\22\7\17\0\3\7\1\124"+
    "\3\7\7\0\1\125\7\7\1\0\2\7\1\0\2\7"+
    "\3\0\10\7\1\126\1\127\10\7\21\0\1\77\15\0"+
    "\1\77\2\0\1\77\54\0\7\7\7\0\1\130\2\7"+
    "\1\131\4\7\1\0\2\7\1\0\2\7\3\0\1\7"+
    "\1\132\16\7\1\133\1\7\50\0\1\54\33\0\1\54"+
    "\11\0\12\31\1\0\1\31\3\0\61\31\1\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\1\7"+
    "\1\134\1\7\1\135\1\7\1\136\4\7\1\137\7\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\10\7\1\140\11\7\17\0\7\7\7\0\10\7"+
    "\1\0\1\141\1\7\1\0\2\7\3\0\10\7\1\142"+
    "\1\143\10\7\17\0\4\7\1\144\2\7\7\0\1\145"+
    "\7\7\1\0\1\146\1\7\1\0\2\7\3\0\4\7"+
    "\1\147\4\7\1\150\5\7\1\151\2\7\17\0\3\7"+
    "\1\152\1\153\2\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\13\7\1\154\6\7\17\0\3\7\1\155"+
    "\1\156\2\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\10\7\1\157\11\7\17\0\7\7\7\0\1\160"+
    "\7\7\1\0\2\7\1\0\2\7\3\0\1\161\7\7"+
    "\1\162\3\7\1\163\2\7\1\164\2\7\17\0\3\7"+
    "\1\165\3\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\5\7\1\166\1\7\1\167\2\7\1\170\7\7"+
    "\17\0\7\7\7\0\6\7\1\171\1\7\1\0\2\7"+
    "\1\0\2\7\3\0\1\7\1\172\1\173\1\174\1\175"+
    "\7\7\1\176\5\7\17\0\3\7\1\177\3\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\1\200\7\7"+
    "\1\201\11\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\11\7\1\202\10\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\1\203"+
    "\10\7\1\114\10\7\17\0\7\7\7\0\1\204\7\7"+
    "\1\0\1\146\1\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\17\7\1\205\2\7\17\0\7\7\7\0\10\7\1\0"+
    "\1\206\1\7\1\0\2\7\3\0\1\207\21\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\1\210\7\7\1\211\11\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\11\7\1\163\10\7"+
    "\104\0\1\54\77\0\2\54\76\0\1\54\1\0\1\54"+
    "\102\0\1\55\100\0\1\55\100\0\1\54\100\0\1\54"+
    "\1\0\10\64\1\0\67\64\10\0\1\212\67\0\11\66"+
    "\1\0\66\66\11\0\1\213\67\0\1\214\6\71\7\0"+
    "\10\71\1\0\2\71\1\0\2\71\3\0\22\71\17\0"+
    "\7\71\7\0\10\71\1\0\2\71\1\0\2\71\3\0"+
    "\22\71\17\0\7\73\7\0\10\73\1\0\2\73\1\0"+
    "\2\73\3\0\22\73\16\0\10\75\3\0\1\75\1\0"+
    "\1\75\1\0\10\75\1\0\2\75\1\0\2\75\1\0"+
    "\1\75\1\0\22\75\15\0\1\75\3\0\1\77\15\0"+
    "\1\77\2\0\1\77\3\0\2\215\1\0\2\216\43\0"+
    "\3\75\1\217\4\75\3\0\1\75\1\0\1\75\1\0"+
    "\2\75\1\217\2\75\1\217\2\75\1\0\2\75\1\220"+
    "\2\75\1\0\1\75\1\0\22\75\5\0\1\220\7\0"+
    "\1\75\1\0\7\7\7\0\1\221\7\7\1\0\2\7"+
    "\1\0\2\7\3\0\2\7\1\222\1\7\1\223\5\7"+
    "\1\224\7\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\1\7\1\225\7\7\1\226\4\7"+
    "\1\227\3\7\17\0\4\7\1\230\2\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\22\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\3\7"+
    "\1\231\5\7\1\232\10\7\16\0\10\106\1\233\1\106"+
    "\1\0\1\110\64\106\10\0\1\234\67\0\12\106\1\0"+
    "\1\106\3\0\61\106\11\111\1\233\1\0\1\113\64\111"+
    "\11\0\1\235\66\0\12\111\1\0\1\111\3\0\61\111"+
    "\1\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\1\7\1\173\20\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\14\7\1\236\5\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\1\7\1\237\5\7\1\240\12\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\3\7"+
    "\1\167\16\7\16\0\3\75\1\120\4\75\3\0\1\75"+
    "\1\0\1\75\1\0\2\75\1\120\2\75\1\120\2\75"+
    "\1\77\2\100\1\0\2\101\1\0\1\75\1\0\22\75"+
    "\15\0\4\75\1\120\4\75\3\0\1\75\1\0\1\75"+
    "\1\0\2\76\1\121\2\75\1\121\2\75\1\77\2\100"+
    "\1\0\2\101\1\0\1\75\1\0\22\75\15\0\4\75"+
    "\1\241\4\75\3\0\1\75\1\0\1\75\1\0\2\75"+
    "\1\241\2\75\3\241\1\0\2\241\1\0\2\75\1\0"+
    "\1\75\1\0\1\241\1\75\1\241\2\75\1\241\1\75"+
    "\1\241\12\75\15\0\1\75\1\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\1\242\21\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\10\7\1\243\11\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\10\7\1\244\11\7\17\0"+
    "\3\7\1\171\3\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\22\7\17\0\7\7\7\0\1\245\7\7"+
    "\1\0\2\7\1\0\2\7\3\0\1\7\1\246\20\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\3\7\1\247\5\7\1\250\10\7\17\0\7\7"+
    "\7\0\10\7\1\0\1\251\1\7\1\0\2\7\3\0"+
    "\7\7\1\252\12\7\17\0\4\7\1\253\2\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\1\254\21\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\2\7\1\171\17\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\3\7"+
    "\1\255\16\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\3\7\1\173\16\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\12\7"+
    "\1\256\7\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\4\7\1\171\15\7\17\0\7\7"+
    "\7\0\1\257\5\7\1\260\1\7\1\0\2\7\1\0"+
    "\2\7\3\0\22\7\17\0\4\7\1\261\2\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\22\7\17\0"+
    "\3\7\1\173\3\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\7\7\1\167\10\7\1\262\1\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\12\7\1\175\1\7\1\173\5\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\11\7\1\263"+
    "\10\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\4\7\1\264\15\7\17\0\3\7\1\173"+
    "\3\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\1\265\21\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\15\7\1\266\4\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\10\7"+
    "\1\267\11\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\13\7\1\171\6\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\12\7"+
    "\1\270\7\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\12\7\1\271\7\7\17\0\7\7"+
    "\7\0\10\7\1\0\1\272\1\7\1\0\2\7\3\0"+
    "\22\7\17\0\7\7\7\0\6\7\1\273\1\7\1\0"+
    "\2\7\1\0\2\7\3\0\22\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\10\7\1\254"+
    "\11\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\1\274\21\7\17\0\7\7\7\0\1\275"+
    "\7\7\1\0\2\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\1\276\1\7\1\0\2\7"+
    "\3\0\1\7\1\277\12\7\1\300\5\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\12\7"+
    "\1\173\7\7\17\0\3\7\1\173\3\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\1\301\21\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\2\7\1\173\17\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\1\302\1\7\3\0\22\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\4\7"+
    "\1\173\15\7\17\0\7\7\7\0\10\7\1\0\1\114"+
    "\1\7\1\0\2\7\3\0\22\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\4\7\1\303"+
    "\5\7\1\304\7\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\3\7\1\305\5\7\1\306"+
    "\10\7\17\0\7\7\7\0\10\7\1\0\1\224\1\7"+
    "\1\0\2\7\3\0\22\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\12\7\1\307\7\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\10\7\1\310\1\311\10\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\3\7\1\312"+
    "\16\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\16\7\1\173\3\7\17\0\7\7\7\0"+
    "\10\7\1\0\1\313\1\7\1\0\2\7\3\0\22\7"+
    "\17\0\7\7\7\0\3\7\1\173\4\7\1\0\2\7"+
    "\1\0\2\7\3\0\12\7\1\173\7\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\10\7"+
    "\1\314\11\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\11\7\1\315\10\7\17\0\7\7"+
    "\7\0\3\7\1\173\4\7\1\0\2\7\1\0\2\7"+
    "\3\0\22\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\3\7\1\316\16\7\17\0\3\7"+
    "\1\136\3\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\22\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\11\7\1\317\10\7\26\0\1\320"+
    "\100\0\1\321\67\0\7\71\7\0\10\71\1\0\2\71"+
    "\1\0\2\71\3\0\11\71\1\322\10\71\21\0\1\323"+
    "\15\0\1\323\2\0\1\323\5\0\1\220\34\0\1\220"+
    "\10\0\3\75\1\217\4\75\3\0\1\75\1\0\1\75"+
    "\1\0\2\75\1\217\2\75\1\217\2\75\1\0\2\75"+
    "\1\0\2\101\1\0\1\75\1\0\22\75\15\0\1\75"+
    "\3\0\1\323\15\0\1\323\2\0\1\323\54\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\10\7"+
    "\1\324\11\7\17\0\4\7\1\263\2\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\22\7\17\0\4\7"+
    "\1\325\2\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\22\7\17\0\3\7\1\173\3\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\22\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\15\7"+
    "\1\271\4\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\3\7\1\247\16\7\17\0\1\326"+
    "\6\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\22\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\1\7\1\327\20\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\11\7\1\150"+
    "\10\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\7\7\1\330\12\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\5\7\1\331"+
    "\14\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\15\7\1\332\4\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\1\333\21\7"+
    "\16\0\3\75\1\241\4\75\3\0\1\75\1\0\1\75"+
    "\1\0\2\76\1\241\2\75\3\241\1\0\2\241\1\0"+
    "\2\75\1\0\1\75\1\0\1\241\1\75\1\241\2\75"+
    "\1\241\1\75\1\241\12\75\15\0\1\75\1\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\1\7"+
    "\1\225\20\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\14\7\1\171\5\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\1\334"+
    "\21\7\17\0\7\7\7\0\10\7\1\0\1\173\1\7"+
    "\1\0\2\7\3\0\4\7\1\175\15\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\1\335"+
    "\21\7\17\0\7\7\7\0\10\7\1\0\1\171\1\7"+
    "\1\0\2\7\3\0\22\7\17\0\7\7\7\0\6\7"+
    "\1\171\1\7\1\0\2\7\1\0\2\7\3\0\22\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\7\7\1\336\12\7\17\0\7\7\7\0\10\7"+
    "\1\0\1\337\1\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\14\7\1\340\5\7\17\0\7\7\7\0\1\173\7\7"+
    "\1\0\2\7\1\0\2\7\3\0\22\7\17\0\7\7"+
    "\7\0\10\7\1\0\1\341\1\7\1\0\2\7\3\0"+
    "\22\7\17\0\7\7\7\0\1\342\7\7\1\0\2\7"+
    "\1\0\2\7\3\0\22\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\1\343\21\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\5\7\1\344\14\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\14\7\1\345\5\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\7\7\1\271\12\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\4\7\1\346\15\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\1\7\1\347\20\7\17\0\3\7\1\334\3\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\1\271\7\7\1\0\2\7\1\0\2\7"+
    "\3\0\22\7\17\0\7\7\7\0\10\7\1\0\1\173"+
    "\1\7\1\0\2\7\3\0\22\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\1\350\21\7"+
    "\17\0\7\7\7\0\6\7\1\175\1\7\1\0\2\7"+
    "\1\0\2\7\3\0\22\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\3\7\1\351\16\7"+
    "\17\0\7\7\7\0\1\352\7\7\1\0\2\7\1\0"+
    "\2\7\3\0\22\7\17\0\3\7\1\263\3\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\4\7\1\353\15\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\12\7\1\354\7\7\17\0"+
    "\3\7\1\332\3\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\22\7\17\0\7\7\7\0\10\7\1\0"+
    "\1\355\1\7\1\0\2\7\3\0\22\7\17\0\7\7"+
    "\7\0\10\7\1\0\1\356\1\7\1\0\2\7\3\0"+
    "\22\7\17\0\4\7\1\167\2\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\22\7\17\0\4\7\1\357"+
    "\2\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\22\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\1\7\1\360\20\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\10\7\1\341"+
    "\11\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\12\7\1\361\7\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\1\7\1\140"+
    "\20\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\3\7\1\171\16\7\17\0\7\7\7\0"+
    "\1\134\7\7\1\0\2\7\1\0\2\7\3\0\22\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\5\7\1\362\14\7\17\0\7\7\7\0\1\247"+
    "\7\7\1\0\2\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\1\343\16\7\1\173\2\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\2\7\1\332\17\7"+
    "\17\0\7\71\7\0\10\71\1\0\2\71\1\0\2\71"+
    "\3\0\1\71\1\363\20\71\21\0\1\323\15\0\1\323"+
    "\2\0\1\323\6\0\2\216\44\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\1\327\21\7\17\0"+
    "\3\7\1\364\3\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\22\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\11\7\1\365\10\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\10\7\1\366\6\7\1\224\2\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\2\7\1\367"+
    "\17\7\17\0\7\7\7\0\1\136\7\7\1\0\2\7"+
    "\1\0\2\7\3\0\22\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\4\7\1\332\15\7"+
    "\17\0\7\7\7\0\1\370\7\7\1\0\2\7\1\0"+
    "\2\7\3\0\22\7\17\0\7\7\7\0\6\7\1\371"+
    "\1\7\1\0\2\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\12\7\1\140\7\7\17\0\7\7\7\0\10\7\1\0"+
    "\1\372\1\7\1\0\2\7\3\0\22\7\17\0\3\7"+
    "\1\140\3\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\22\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\13\7\1\173\6\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\4\7"+
    "\1\373\15\7\17\0\7\7\7\0\1\374\7\7\1\0"+
    "\2\7\1\0\2\7\3\0\22\7\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\10\7\1\327"+
    "\11\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\11\7\1\375\10\7\17\0\7\7\7\0"+
    "\10\7\1\0\1\317\1\7\1\0\2\7\3\0\22\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\6\7\1\171\13\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\3\7\1\376\16\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\1\377\21\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\11\7\1\u0100\10\7\17\0"+
    "\7\7\7\0\1\u0101\7\7\1\0\2\7\1\0\2\7"+
    "\3\0\11\7\1\270\10\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\7\7\1\167\12\7"+
    "\17\0\3\7\1\114\3\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\22\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\5\7\1\u0102\14\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\3\7\1\u0103\16\7\17\0\7\7\7\0\10\7"+
    "\1\0\1\u0104\1\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\1\u0105\21\7\17\0\7\71\7\0\10\71\1\0\2\71"+
    "\1\0\2\71\3\0\11\71\1\u0106\10\71\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\1\7"+
    "\1\171\20\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\1\7\1\u0107\20\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\2\7"+
    "\1\271\17\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\1\171\21\7\17\0\7\7\7\0"+
    "\1\152\7\7\1\0\2\7\1\0\2\7\3\0\22\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\11\7\1\270\10\7\17\0\3\7\1\u0108\3\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\22\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\4\7\1\224\15\7\17\0\7\7\7\0\10\7"+
    "\1\0\1\332\1\7\1\0\2\7\3\0\22\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\7\7\1\u0109\12\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\14\7\1\u010a\5\7\17\0"+
    "\7\7\7\0\10\7\1\0\2\7\1\0\2\7\3\0"+
    "\5\7\1\270\14\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\1\7\1\u010b\20\7\17\0"+
    "\7\7\7\0\10\7\1\0\1\206\1\7\1\0\2\7"+
    "\3\0\22\7\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\7\7\1\u010c\12\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\4\7"+
    "\1\u010d\15\7\17\0\3\7\1\u010e\3\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\22\7\17\0\7\7"+
    "\7\0\1\u010f\7\7\1\0\2\7\1\0\2\7\3\0"+
    "\22\7\17\0\7\71\7\0\10\71\1\0\2\71\1\0"+
    "\2\71\3\0\4\71\1\u0110\15\71\17\0\7\7\7\0"+
    "\10\7\1\0\2\7\1\0\2\7\3\0\12\7\1\304"+
    "\7\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\1\u0111\21\7\17\0\7\7\7\0\10\7"+
    "\1\0\1\u0112\1\7\1\0\2\7\3\0\22\7\17\0"+
    "\4\7\1\247\2\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\22\7\17\0\7\7\7\0\1\u0113\7\7"+
    "\1\0\2\7\1\0\2\7\3\0\22\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\1\u0114"+
    "\21\7\17\0\7\7\7\0\10\7\1\0\2\7\1\0"+
    "\2\7\3\0\4\7\1\342\15\7\17\0\1\u0115\6\71"+
    "\7\0\10\71\1\0\2\71\1\0\2\71\3\0\22\71"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\4\7\1\271\15\7\17\0\7\7\7\0\10\7"+
    "\1\0\2\7\1\0\2\7\3\0\4\7\1\u0116\15\7"+
    "\17\0\7\7\7\0\10\7\1\0\2\7\1\0\2\7"+
    "\3\0\1\u0117\21\7\17\0\7\7\7\0\10\7\1\0"+
    "\2\7\1\0\2\7\3\0\1\7\1\263\20\7\17\0"+
    "\1\u0118\6\71\7\0\10\71\1\0\2\71\1\0\2\71"+
    "\3\0\22\71\17\0\7\7\7\0\10\7\1\0\2\7"+
    "\1\0\2\7\3\0\17\7\1\345\2\7\17\0\7\7"+
    "\7\0\10\7\1\0\2\7\1\0\2\7\3\0\3\7"+
    "\1\136\16\7\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\10\1\1\11\10\1\1\11\22\1\2\11"+
    "\15\1\1\11\1\1\1\11\13\1\1\0\2\1\1\0"+
    "\76\1\2\0\1\1\1\0\1\11\1\1\1\0\12\1"+
    "\3\11\62\1\2\11\107\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public SavuPythonTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	@Override
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = LONG_STRING_2;
				break;
			case Token.LITERAL_CHAR:
				state = LONG_STRING_1;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SavuPythonTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SavuPythonTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 25: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 26: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 27: break;
        case 4: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 28: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 29: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 30: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 31: break;
        case 8: 
          { addToken(Token.COMMENT_EOL);
          }
        case 32: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 33: break;
        case 10: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 34: break;
        case 11: 
          { addToken(Token.FUNCTION);
          }
        case 35: break;
        case 12: 
          { yybegin(FUNCTION_DEFINITION_ARGS); addToken(Token.SEPARATOR);
          }
        case 36: break;
        case 13: 
          { addToken(Token.VARIABLE);
          }
        case 37: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(Token.SEPARATOR);
          }
        case 38: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 39: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 18: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 42: break;
        case 19: 
          { yybegin(LONG_STRING_1); addToken(Token.LITERAL_CHAR);
          }
        case 43: break;
        case 20: 
          { yybegin(LONG_STRING_2); addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 44: break;
        case 21: 
          { yybegin(FUNCTION_DEFINITION); addToken(Token.RESERVED_WORD);
          }
        case 45: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 46: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(Token.LITERAL_CHAR);
          }
        case 47: break;
        case 24: 
          { yybegin(YYINITIAL); addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 281: break;
            case LONG_STRING_1: {
              if (firstToken==null) {
										addToken(Token.LITERAL_CHAR); 
									}
									return firstToken;
            }
            case 282: break;
            case LONG_STRING_2: {
              if (firstToken==null) {
										addToken(Token.LITERAL_STRING_DOUBLE_QUOTE); 
									}
									return firstToken;
            }
            case 283: break;
            case FUNCTION_DEFINITION: {
              addNullToken(); return firstToken;
            }
            case 284: break;
            case FUNCTION_DEFINITION_ARGS: {
              addNullToken(); return firstToken;
            }
            case 285: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
